<statements>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>zip</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>137</id><start>2291</start><end>2294</end><line>95</line><description>scala.collection.immutable.Nil</description><symbolName>scala.collection.immutable.Nil</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>merge</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>146</id><start>2754</start><end>2774</end><line>113</line><description>Exercise.this.merge(list1, ys1).::[Int](x$9)</description><symbolName>scala.collection.immutable.List.::</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>getCompanyValue</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>218</id><start>3866</start><end>4009</end><line>152</line><description>company.branches.flatMap[Int, List[Int]](((branch: com.techsophy.training.Branch) =&gt; branch.consultants.flatMap[Int, List[Int]](((consultant: com.techsophy.training.Consultant) =&gt; consultant.portfolio.map[Int, List[Int]](((customer: com.techsophy.training.Customer) =&gt; customer.value))(immutable.this.List.canBuildFrom[Int])))(immutable.this.List.canBuildFrom[Int])))(immutable.this.List.canBuildFrom[Int])</description><symbolName>scala.collection.immutable.List.flatMap</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>227</id><start>4261</start><end>4278</end><line>164</line><description>scala.Some.apply[Int](list.length)</description><symbolName>scala.Some.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>sum</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>92</id><start>1048</start><end>1067</end><line>54</line><description>opt1.get.+(opt2.get)</description><symbolName>scala.Int.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>wordCount</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>101</id><start>1296</start><end>1356</end><line>66</line><description>scala.Predef.refArrayOps[String](str.split(&quot;\\s+&quot;)).toList.groupBy[String](((w: String) =&gt; w)).mapValues[Int](((x$3: List[String]) =&gt; x$3.length))</description><symbolName>scala.collection.immutable.MapLike.mapValues</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>200</id><start>3689</start><end>3689</end><line>143</line><description>immutable.this.List.canBuildFrom[com.techsophy.training.Student]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>173</id><start>3218</start><end>3218</end><line>132</line><description>emp.copy$default$1</description><symbolName>com.techsophy.training.Employee.copy$default$1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>209</id><start>3728</start><end>3759</end><line>144</line><description>scala.Tuple4.apply[List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student]](a._1, a._2, a._3, a._4.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student]))</description><symbolName>scala.Tuple4.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>182</id><start>3453</start><end>3468</end><line>138</line><description>scala.collection.immutable.Nil</description><symbolName>scala.collection.immutable.Nil</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>191</id><start>3557</start><end>3588</end><line>141</line><description>scala.Tuple4.apply[List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student]](a._1.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student]), a._2, a._3, a._4)</description><symbolName>scala.Tuple4.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>83</id><start>814</start><end>838</end><line>43</line><description>rList = scala.Predef.intArrayOps(scala.Predef.intArrayOps(a).tail).:+[Int](scala.Predef.intArrayOps(a).head)((ClassTag.Int: scala.reflect.ClassTag[Int]))</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Assign</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>155</id><start>2940</start><end>3013</end><line>121</line><description>{
  hra = 1;
  emp.salary.hra.+(0.2.*(emp.salary.hra))
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>164</id><start>3135</start><end>3183</end><line>129</line><description>Salary.apply(emp.salary.basic, salary1, emp.salary.ta)</description><symbolName>com.techsophy.training.Salary.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeOdd</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>110</id><start>1607</start><end>1625</end><line>74</line><description>scala.Predef.Map.apply[String, Int]()</description><symbolName>scala.collection.generic.GenMapFactory.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeOdd</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>119</id><start>1593</start><end>1724</end><line>74</line><description>map.foldRight[scala.collection.immutable.Map[String,Int]](scala.Predef.Map.apply[String, Int]())(((element: (String, Int), result: scala.collection.immutable.Map[String,Int]) =&gt; if (element._2.%(2).!=(0))
  result
else
  scala.Predef.Map.apply[String, Int](scala.Predef.ArrowAssoc[String](scala.Predef.any2stringadd[scala.collection.immutable.Map[String,Int]](result).+(element._1)).-&gt;[Int](element._2))))</description><symbolName>scala.collection.IterableLike.foldRight</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concatenate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>128</id><start>1917</start><end>1937</end><line>79</line><description>scala.Predef.ArrowAssoc[String](k).-&gt;[Int](v.map[Int, List[Int]](((x$6: (String, Int)) =&gt; x$6._2))(immutable.this.List.canBuildFrom[Int]).sum[Int](math.this.Numeric.IntIsIntegral))</description><symbolName>scala.Predef.ArrowAssoc.-&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>sum</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>95</id><start>1092</start><end>1096</end><line>57</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>23</id><start>1069</start><end>1081</end><line>28</line><description>record.topic()</description><symbolName>org.apache.kafka.clients.consumer.ConsumerRecord.topic</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>dedupe</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>104</id><start>1479</start><end>1490</end><line>70</line><description>result.head</description><symbolName>scala.collection.IterableLike.head</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeKeys</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>131</id><start>2091</start><end>2109</end><line>86</line><description>rMap.contains(key)</description><symbolName>scala.collection.MapLike.contains</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concatenate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>122</id><start>1833</start><end>1859</end><line>78</line><description>map1.toList.++[(String, Int), List[(String, Int)]](map2.toList)(immutable.this.List.canBuildFrom[(String, Int)])</description><symbolName>scala.collection.immutable.List.++</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>194</id><start>3621</start><end>3632</end><line>142</line><description>a._2.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student])</description><symbolName>scala.collection.SeqLike.:+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>176</id><start>3214</start><end>3279</end><line>132</line><description>emp.copy(x$15, x$16, x$14, x$17)</description><symbolName>com.techsophy.training.Employee.copy</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>77</id><start>749</start><end>761</end><line>40</line><description>scala.Array.apply[Int]()((ClassTag.Int: scala.reflect.ClassTag[Int]))</description><symbolName>scala.Array.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>86</id><start>876</start><end>900</end><line>46</line><description>scala.Predef.intArrayOps(scala.Predef.intArrayOps(rList).tail).:+[Int](scala.Predef.intArrayOps(rList).head)((ClassTag.Int: scala.reflect.ClassTag[Int]))</description><symbolName>scala.collection.mutable.ArrayOps.:+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>158</id><start>3055</start><end>3077</end><line>126</line><description>0.1.*(emp.salary.basic)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>185</id><start>3514</start><end>3522</end><line>140</line><description>s.branch</description><symbolName>com.techsophy.training.Student.branch</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>167</id><start>3121</start><end>3121</end><line>129</line><description>emp.copy$default$4</description><symbolName>com.techsophy.training.Employee.copy$default$4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>send</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>50</id><start>885</start><end>920</end><line>23</line><description>{
  SimpleProducer.this.producer.send(record);
  scala.Some.apply[Int](1)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>show</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>59</id><start>223</start><end>248</end><line>13</line><description>scala.Predef.intWrapper(1).to(n).map[Int, scala.collection.immutable.IndexedSeq[Int]](((i: Int) =&gt; i))(immutable.this.IndexedSeq.canBuildFrom[Int])</description><symbolName>scala.collection.TraversableLike.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>fill</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>68</id><start>481</start><end>520</end><line>26</line><description>{
  &lt;synthetic&gt; &lt;artifact&gt; val x$1: Int = element;
  Exercise.this.fill(element)(noOfTimes.-(1)).::[Int](x$1)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>32</id><start>1325</start><end>1329</end><line>36</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>41</id><start>509</start><end>571</end><line>16</line><description>SimpleProducer.this.props.put(&quot;key.serializer&quot;, classOf[org.apache.kafka.common.serialization.StringSerializer].getName())</description><symbolName>java.util.Hashtable.put</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeOdd</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>113</id><start>1698</start><end>1708</end><line>74</line><description>element._1</description><symbolName>scala.Tuple2._1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>merge</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>140</id><start>2516</start><end>2519</end><line>104</line><description>scala.collection.immutable.Nil</description><symbolName>scala.collection.immutable.Nil</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>149</id><start>2926</start><end>2938</end><line>121</line><description>emp.age.&gt;(50)</description><symbolName>scala.Int.&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>send</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>53</id><start>1081</start><end>1129</end><line>32</line><description>SimpleProducer.this.logger.error(&quot;Error in reading from kafka &quot;, ex)</description><symbolName>org.slf4j.Logger.error</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>show</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>62</id><start>270</start><end>328</end><line>14</line><description>flattenList.flatMap[Int, scala.collection.immutable.IndexedSeq[Int]](((number: Int) =&gt; Exercise.this.fill(number)(f)))(immutable.this.IndexedSeq.canBuildFrom[Int])</description><symbolName>scala.collection.TraversableLike.flatMap</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeKeys</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>134</id><start>2087</start><end>2087</end><line>86</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>35</id><start>384</start><end>400</end><line>12</line><description>new java.util.Properties()</description><symbolName>java.util.Properties.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>8</id><start>573</start><end>603</end><line>18</line><description>SimpleConsumer.this.props.put(&quot;group.id&quot;, SimpleConsumer.this.groupId)</description><symbolName>java.util.Hashtable.put</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>44</id><start>574</start><end>638</end><line>17</line><description>SimpleProducer.this.props.put(&quot;value.serializer&quot;, classOf[org.apache.kafka.common.serialization.StringSerializer].getName())</description><symbolName>java.util.Hashtable.put</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>17</id><start>807</start><end>881</end><line>23</line><description>new org.apache.kafka.clients.consumer.KafkaConsumer[String,String](SimpleConsumer.this.props)</description><symbolName>org.apache.kafka.clients.consumer.KafkaConsumer.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>26</id><start>1057</start><end>1057</end><line>28</line><description>collection.this.Iterable.canBuildFrom[(String, String)]</description><symbolName>scala.collection.Iterable.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concatenate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>125</id><start>1927</start><end>1927</end><line>79</line><description>immutable.this.List.canBuildFrom[Int]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>sum</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>89</id><start>1020</start><end>1033</end><line>53</line><description>opt2.nonEmpty</description><symbolName>scala.Option.nonEmpty</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>80</id><start>822</start><end>828</end><line>43</line><description>scala.Predef.intArrayOps(a).tail</description><symbolName>scala.collection.IndexedSeqOptimized.tail</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeOdd</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>116</id><start>1689</start><end>1722</end><line>74</line><description>scala.Predef.ArrowAssoc[String](scala.Predef.any2stringadd[scala.collection.immutable.Map[String,Int]](result).+(element._1)).-&gt;[Int](element._2)</description><symbolName>scala.Predef.ArrowAssoc.-&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>reverse</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>71</id><start>608</start><end>614</end><line>32</line><description>scala.collection.immutable.Nil</description><symbolName>scala.collection.immutable.Nil</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concat</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>98</id><start>1176</start><end>1235</end><line>62</line><description>list1.foldRight[List[Int]](list2)(((element: Int, acc: List[Int]) =&gt; {
  &lt;synthetic&gt; &lt;artifact&gt; val x$2: Int = element;
  acc.::[Int](x$2)
}))</description><symbolName>scala.collection.immutable.List.foldRight</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>dedupe</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>107</id><start>1512</start><end>1521</end><line>70</line><description>result.::[Int](x$4)</description><symbolName>scala.collection.immutable.List.::</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>11</id><start>606</start><end>672</end><line>19</line><description>SimpleConsumer.this.props.put(&quot;key.deserializer&quot;, classOf[org.apache.kafka.common.serialization.StringDeserializer].getName())</description><symbolName>java.util.Hashtable.put</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>reverse</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>74</id><start>657</start><end>657</end><line>35</line><description>immutable.this.List.canBuildFrom[Int]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>56</id><start>118</start><end>156</end><line>9</line><description>org.slf4j.LoggerFactory.getLogger(this.getClass())</description><symbolName>org.slf4j.LoggerFactory.getLogger</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>29</id><start>1169</start><end>1218</end><line>32</line><description>SimpleConsumer.this.logger.debug(&quot;Error in reading from kafka &quot;, wue)</description><symbolName>org.slf4j.Logger.debug</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>38</id><start>481</start><end>506</end><line>15</line><description>SimpleProducer.this.props.put(&quot;retries&quot;, &quot;5&quot;)</description><symbolName>java.util.Hashtable.put</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>send</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>47</id><start>818</start><end>868</end><line>22</line><description>new org.apache.kafka.clients.producer.ProducerRecord[String,String](topic, message)</description><symbolName>org.apache.kafka.clients.producer.ProducerRecord.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>226</id><start>4266</start><end>4277</end><line>164</line><description>list.length</description><symbolName>scala.Array.length</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>20</id><start>884</start><end>910</end><line>24</line><description>SimpleConsumer.this.consumer.subscribe(scala.collection.JavaConversions.deprecated seqAsJavaList[String](SimpleConsumer.this.topic))</description><symbolName>org.apache.kafka.clients.consumer.KafkaConsumer.subscribe</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>2</id><start>408</start><end>446</end><line>12</line><description>org.slf4j.LoggerFactory.getLogger(this.getClass())</description><symbolName>org.slf4j.LoggerFactory.getLogger</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>fill</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>65</id><start>451</start><end>457</end><line>23</line><description>scala.collection.immutable.Nil</description><symbolName>scala.collection.immutable.Nil</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>5</id><start>521</start><end>570</end><line>17</line><description>SimpleConsumer.this.props.put(&quot;bootstrap.servers&quot;, &quot;localhost :9092&quot;)</description><symbolName>java.util.Hashtable.put</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>184</id><start>3418</start><end>3486</end><line>138</line><description>scala.Tuple4.apply[List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student]](scala.collection.immutable.Nil, scala.collection.immutable.Nil, scala.collection.immutable.Nil, scala.collection.immutable.Nil)</description><symbolName>scala.Tuple4.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>193</id><start>3626</start><end>3626</end><line>142</line><description>immutable.this.List.canBuildFrom[com.techsophy.training.Student]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>175</id><start>3218</start><end>3218</end><line>132</line><description>emp.copy$default$4</description><symbolName>com.techsophy.training.Employee.copy$default$4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>211</id><start>3491</start><end>3773</end><line>139</line><description>list.map[Unit, List[Unit]](((s: com.techsophy.training.Student) =&gt; s.branch match {
  case &quot;CS&quot; =&gt; a = scala.Tuple4.apply[List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student]](a._1.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student]), a._2, a._3, a._4)
  case &quot;IT&quot; =&gt; a = scala.Tuple4.apply[List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student]](a._1, a._2.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student]), a._3, a._4)
  case &quot;EC&quot; =&gt; a = scala.Tuple4.apply[List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student]](a._1, a._2, a._3.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student]), a._4)
  case &quot;ME&quot; =&gt; a = scala.Tuple4.apply[List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student]](a._1, a._2, a._3, a._4.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student]))
}))(immutable.this.List.canBuildFrom[Unit])</description><symbolName>scala.collection.immutable.List.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>166</id><start>3121</start><end>3121</end><line>129</line><description>emp.copy$default$2</description><symbolName>com.techsophy.training.Employee.copy$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>14</id><start>675</start><end>743</end><line>20</line><description>SimpleConsumer.this.props.put(&quot;value.deserializer&quot;, classOf[org.apache.kafka.common.serialization.StringDeserializer].getName())</description><symbolName>java.util.Hashtable.put</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>getCompanyValue</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>220</id><start>4055</start><end>4065</end><line>156</line><description>acc.+(elem)</description><symbolName>scala.Int.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>229</id><start>4308</start><end>4312</end><line>167</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>202</id><start>3697</start><end>3701</end><line>143</line><description>a._4</description><symbolName>scala.Tuple4._4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>merge</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>142</id><start>2617</start><end>2662</end><line>108</line><description>Exercise.this.logger.info(scala.StringContext.apply(&quot;x = &quot;, &quot; ,&quot;, &quot; and y=&quot;, &quot; ,  &quot;, &quot;&quot;).s(x, xs1, y, ys1))</description><symbolName>org.slf4j.Logger.info</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>151</id><start>2984</start><end>2987</end><line>123</line><description>0.2</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>223</id><start>4163</start><end>4181</end><line>161</line><description>directory.exists()</description><symbolName>java.io.File.exists</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>232</id><start>4344</start><end>4348</end><line>171</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concatenate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>124</id><start>1928</start><end>1932</end><line>79</line><description>x$6._2</description><symbolName>scala.Tuple2._2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>dedupe</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>106</id><start>1492</start><end>1498</end><line>70</line><description>result</description><symbolName>com.techsophy.training.Exercise.result</symbolName><treeName>Ident</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeKeys</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>133</id><start>2121</start><end>2138</end><line>87</line><description>rMap = rMap.-(key)</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Assign</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>205</id><start>3735</start><end>3739</end><line>144</line><description>a._2</description><symbolName>scala.Tuple4._2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>getCompanyValue</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>214</id><start>3950</start><end>4009</end><line>154</line><description>consultant.portfolio.map[Int, List[Int]](((customer: com.techsophy.training.Customer) =&gt; customer.value))(immutable.this.List.canBuildFrom[Int])</description><symbolName>scala.collection.immutable.List.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>160</id><start>3035</start><end>3078</end><line>126</line><description>emp.salary.basic.+(0.1.*(emp.salary.basic))</description><symbolName>scala.Double.+</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>169</id><start>3117</start><end>3184</end><line>129</line><description>{
  &lt;artifact&gt; val x$10: com.techsophy.training.Salary = Salary.apply(emp.salary.basic, salary1, emp.salary.ta);
  &lt;artifact&gt; val x$11: Int = emp.copy$default$1;
  &lt;artifact&gt; val x$12: String = emp.copy$default$2;
  &lt;artifact&gt; val x$13: Int = emp.copy$default$4;
  emp.copy(x$11, x$12, x$10, x$13)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>178</id><start>2893</start><end>2893</end><line>120</line><description>immutable.this.List.canBuildFrom[com.techsophy.training.Employee]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeOdd</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>115</id><start>1712</start><end>1722</end><line>74</line><description>element._2</description><symbolName>scala.Tuple2._2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>187</id><start>3558</start><end>3569</end><line>141</line><description>a._1.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student])</description><symbolName>scala.collection.SeqLike.:+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>196</id><start>3640</start><end>3644</end><line>142</line><description>a._4</description><symbolName>scala.Tuple4._4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>181</id><start>3436</start><end>3451</end><line>138</line><description>scala.collection.immutable.Nil</description><symbolName>scala.collection.immutable.Nil</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>163</id><start>3169</start><end>3182</end><line>129</line><description>emp.salary.ta</description><symbolName>com.techsophy.training.Salary.ta</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>172</id><start>3232</start><end>3278</end><line>132</line><description>Salary.apply(salary1, emp.salary.hra, emp.salary.ta)</description><symbolName>com.techsophy.training.Salary.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>46</id><start>665</start><end>739</end><line>19</line><description>new org.apache.kafka.clients.producer.KafkaProducer[String,String](SimpleProducer.this.props)</description><symbolName>org.apache.kafka.clients.producer.KafkaProducer.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeOdd</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>118</id><start>1685</start><end>1723</end><line>74</line><description>scala.Predef.Map.apply[String, Int](scala.Predef.ArrowAssoc[String](scala.Predef.any2stringadd[scala.collection.immutable.Map[String,Int]](result).+(element._1)).-&gt;[Int](element._2))</description><symbolName>scala.collection.generic.GenMapFactory.apply</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concatenate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>127</id><start>1922</start><end>1937</end><line>79</line><description>v.map[Int, List[Int]](((x$6: (String, Int)) =&gt; x$6._2))(immutable.this.List.canBuildFrom[Int]).sum[Int](math.this.Numeric.IntIsIntegral)</description><symbolName>scala.collection.TraversableOnce.sum</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>199</id><start>3678</start><end>3682</end><line>143</line><description>a._2</description><symbolName>scala.Tuple4._2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeKeys</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>136</id><start>2061</start><end>2146</end><line>85</line><description>keys.foreach[Unit](((key: String) =&gt; if (rMap.contains(key))
  rMap = rMap.-(key)
else
  ()))</description><symbolName>scala.collection.immutable.List.foreach</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>208</id><start>3747</start><end>3758</end><line>144</line><description>a._4.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student])</description><symbolName>scala.collection.SeqLike.:+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>getCompanyValue</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>217</id><start>3885</start><end>3885</end><line>152</line><description>immutable.this.List.canBuildFrom[Int]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>wordCount</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>100</id><start>1347</start><end>1355</end><line>66</line><description>x$3.length</description><symbolName>scala.collection.LinearSeqOptimized.length</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>82</id><start>822</start><end>838</end><line>43</line><description>scala.Predef.intArrayOps(scala.Predef.intArrayOps(a).tail).:+[Int](scala.Predef.intArrayOps(a).head)((ClassTag.Int: scala.reflect.ClassTag[Int]))</description><symbolName>scala.collection.mutable.ArrayOps.:+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>dedupe</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>109</id><start>1411</start><end>1522</end><line>70</line><description>list.foldRight[List[Int]](scala.collection.immutable.List.apply[Int](list.last))(((element: Int, result: List[Int]) =&gt; if (element.==(result.head))
  result
else
  {
    &lt;synthetic&gt; &lt;artifact&gt; val x$4: Int = element;
    result.::[Int](x$4)
  }))</description><symbolName>scala.collection.immutable.List.foldRight</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>sum</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>91</id><start>1059</start><end>1067</end><line>54</line><description>opt2.get</description><symbolName>scala.Option.get</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>190</id><start>3583</start><end>3587</end><line>141</line><description>a._4</description><symbolName>scala.Tuple4._4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>fill</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>64</id><start>427</start><end>441</end><line>22</line><description>noOfTimes.==(0)</description><symbolName>scala.Int.==</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>55</id><start>142</start><end>155</end><line>9</line><description>this.getClass()</description><symbolName>java.lang.Object.getClass</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>reverse</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>73</id><start>660</start><end>669</end><line>35</line><description>list.head</description><symbolName>scala.collection.IterableLike.head</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>merge</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>145</id><start>2694</start><end>2716</end><line>110</line><description>{
  &lt;synthetic&gt; &lt;artifact&gt; val x$8: Int = x;
  Exercise.this.merge(xs1, list2).::[Int](x$8)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>154</id><start>2966</start><end>3005</end><line>123</line><description>emp.salary.hra.+(0.2.*(emp.salary.hra))</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>85</id><start>890</start><end>900</end><line>46</line><description>scala.Predef.intArrayOps(rList).head</description><symbolName>scala.collection.IndexedSeqOptimized.head</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>sum</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>94</id><start>1043</start><end>1068</end><line>54</line><description>scala.Some.apply[Int](opt1.get.+(opt2.get))</description><symbolName>scala.Some.apply</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>fill</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>67</id><start>489</start><end>520</end><line>26</line><description>Exercise.this.fill(element)(noOfTimes.-(1)).::[Int](x$1)</description><symbolName>scala.collection.immutable.List.::</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>show</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>58</id><start>230</start><end>230</end><line>13</line><description>immutable.this.IndexedSeq.canBuildFrom[Int]</description><symbolName>scala.collection.immutable.IndexedSeq.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>zip</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>139</id><start>2368</start><end>2388</end><line>97</line><description>Exercise.this.zip(list1, list2).::[(Int, String)](x$7)</description><symbolName>scala.collection.immutable.List.::</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>40</id><start>537</start><end>570</end><line>16</line><description>classOf[org.apache.kafka.common.serialization.StringSerializer].getName()</description><symbolName>java.lang.Class.getName</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>send</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>49</id><start>913</start><end>920</end><line>25</line><description>scala.Some.apply[Int](1)</description><symbolName>scala.Some.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concatenate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>130</id><start>1877</start><end>1939</end><line>79</line><description>list.groupBy[String](((x$5: (String, Int)) =&gt; x$5._1)).map[(String, Int), scala.collection.immutable.Map[String,Int]](((x0$1: (String, List[(String, Int)])) =&gt; x0$1 match {
  case (_1: String, _2: List[(String, Int)])(String, List[(String, Int)])((k @ _), (v @ _)) =&gt; scala.Predef.ArrowAssoc[String](k).-&gt;[Int](v.map[Int, List[Int]](((x$6: (String, Int)) =&gt; x$6._2))(immutable.this.List.canBuildFrom[Int]).sum[Int](math.this.Numeric.IntIsIntegral))
}))(immutable.this.Map.canBuildFrom[String, Int])</description><symbolName>scala.collection.TraversableLike.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>4</id><start>502</start><end>518</end><line>16</line><description>new java.util.Properties()</description><symbolName>java.util.Properties.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>13</id><start>707</start><end>742</end><line>20</line><description>classOf[org.apache.kafka.common.serialization.StringDeserializer].getName()</description><symbolName>java.lang.Class.getName</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concatenate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>121</id><start>1845</start><end>1845</end><line>78</line><description>immutable.this.List.canBuildFrom[(String, Int)]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>148</id><start>2873</start><end>2874</end><line>119</line><description>0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>157</id><start>3061</start><end>3077</end><line>126</line><description>emp.salary.basic</description><symbolName>com.techsophy.training.Salary.basic</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>22</id><start>1017</start><end>1039</end><line>27</line><description>SimpleConsumer.this.consumer.poll(SimpleConsumer.this.timeout)</description><symbolName>org.apache.kafka.clients.consumer.KafkaConsumer.poll</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>31</id><start>1268</start><end>1316</end><line>35</line><description>SimpleConsumer.this.logger.error(&quot;Error in reading from kafka &quot;, ex)</description><symbolName>org.slf4j.Logger.error</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>reverse</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>76</id><start>638</start><end>669</end><line>35</line><description>Exercise.this.reverse(list.tail).:+[Int, List[Int]](list.head)(immutable.this.List.canBuildFrom[Int])</description><symbolName>scala.collection.SeqLike.:+</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>dedupe</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>103</id><start>1426</start><end>1441</end><line>70</line><description>scala.collection.immutable.List.apply[Int](list.last)</description><symbolName>scala.collection.immutable.List.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeOdd</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>112</id><start>1673</start><end>1679</end><line>74</line><description>result</description><symbolName>com.techsophy.training.Exercise.result</symbolName><treeName>Ident</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>16</id><start>875</start><end>880</end><line>23</line><description>SimpleConsumer.this.props</description><symbolName>com.skafka.example.SimpleConsumer.props</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concat</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>97</id><start>1227</start><end>1233</end><line>62</line><description>acc.::[Int](x$2)</description><symbolName>scala.collection.immutable.List.::</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>7</id><start>595</start><end>602</end><line>18</line><description>SimpleConsumer.this.groupId</description><symbolName>com.skafka.example.SimpleConsumer.groupId</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>79</id><start>796</start><end>802</end><line>42</line><description>i.==(1)</description><symbolName>scala.Int.==</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>88</id><start>766</start><end>908</end><line>41</line><description>scala.Predef.intWrapper(1).to(r).foreach[Unit](((i: Int) =&gt; if (i.==(1))
  rList = scala.Predef.intArrayOps(scala.Predef.intArrayOps(a).tail).:+[Int](scala.Predef.intArrayOps(a).head)((ClassTag.Int: scala.reflect.ClassTag[Int]))
else
  rList = scala.Predef.intArrayOps(scala.Predef.intArrayOps(rList).tail).:+[Int](scala.Predef.intArrayOps(rList).head)((ClassTag.Int: scala.reflect.ClassTag[Int]))))</description><symbolName>scala.collection.immutable.Range.foreach</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>reverse</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>70</id><start>608</start><end>614</end><line>32</line><description>scala.collection.immutable.Nil</description><symbolName>scala.collection.immutable.Nil</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>send</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>52</id><start>1040</start><end>1044</end><line>30</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>43</id><start>604</start><end>637</end><line>17</line><description>classOf[org.apache.kafka.common.serialization.StringSerializer].getName()</description><symbolName>java.lang.Class.getName</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>25</id><start>1068</start><end>1096</end><line>28</line><description>scala.Tuple2.apply[String, String](record.topic(), record.value())</description><symbolName>scala.Tuple2.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>34</id><start>322</start><end>360</end><line>10</line><description>org.slf4j.LoggerFactory.getLogger(this.getClass())</description><symbolName>org.slf4j.LoggerFactory.getLogger</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>show</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>61</id><start>282</start><end>282</end><line>14</line><description>immutable.this.IndexedSeq.canBuildFrom[Int]</description><symbolName>scala.collection.immutable.IndexedSeq.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>10</id><start>636</start><end>671</end><line>19</line><description>classOf[org.apache.kafka.common.serialization.StringDeserializer].getName()</description><symbolName>java.lang.Class.getName</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>189</id><start>3577</start><end>3581</end><line>141</line><description>a._3</description><symbolName>scala.Tuple4._3</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>225</id><start>4234</start><end>4249</end><line>163</line><description>list.length.&gt;(0)</description><symbolName>scala.Int.&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>37</id><start>454</start><end>478</end><line>14</line><description>SimpleProducer.this.props.put(&quot;acks&quot;, &quot;all&quot;)</description><symbolName>java.util.Hashtable.put</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>180</id><start>3419</start><end>3434</end><line>138</line><description>scala.collection.immutable.Nil</description><symbolName>scala.collection.immutable.Nil</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>1</id><start>432</start><end>445</end><line>12</line><description>this.getClass()</description><symbolName>java.lang.Object.getClass</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>207</id><start>3752</start><end>3752</end><line>144</line><description>immutable.this.List.canBuildFrom[com.techsophy.training.Student]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>getCompanyValue</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>216</id><start>3911</start><end>4009</end><line>153</line><description>branch.consultants.flatMap[Int, List[Int]](((consultant: com.techsophy.training.Consultant) =&gt; consultant.portfolio.map[Int, List[Int]](((customer: com.techsophy.training.Customer) =&gt; customer.value))(immutable.this.List.canBuildFrom[Int])))(immutable.this.List.canBuildFrom[Int])</description><symbolName>scala.collection.immutable.List.flatMap</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>198</id><start>3672</start><end>3676</end><line>143</line><description>a._1</description><symbolName>scala.Tuple4._1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>19</id><start>904</start><end>909</end><line>24</line><description>scala.collection.JavaConversions.deprecated seqAsJavaList[String](SimpleConsumer.this.topic)</description><symbolName>scala.collection.convert.WrapAsJava.deprecated seqAsJavaList</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>28</id><start>970</start><end>1108</end><line>26</line><description>{
  val records: org.apache.kafka.clients.consumer.ConsumerRecords[String,String] = SimpleConsumer.this.consumer.poll(SimpleConsumer.this.timeout);
  scala.collection.JavaConversions.deprecated iterableAsScalaIterable[org.apache.kafka.clients.consumer.ConsumerRecord[String,String]](records).map[(String, String), Iterable[(String, String)]](((record: org.apache.kafka.clients.consumer.ConsumerRecord[String,String]) =&gt; scala.Tuple2.apply[String, String](record.topic(), record.value())))(collection.this.Iterable.canBuildFrom[(String, String)]).headOption
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>merge</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>147</id><start>2752</start><end>2774</end><line>113</line><description>{
  &lt;synthetic&gt; &lt;artifact&gt; val x$9: Int = y;
  Exercise.this.merge(list1, ys1).::[Int](x$9)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>174</id><start>3218</start><end>3218</end><line>132</line><description>emp.copy$default$2</description><symbolName>com.techsophy.training.Employee.copy$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>156</id><start>3055</start><end>3058</end><line>126</line><description>0.1</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>183</id><start>3470</start><end>3485</end><line>138</line><description>scala.collection.immutable.Nil</description><symbolName>scala.collection.immutable.Nil</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>228</id><start>4261</start><end>4278</end><line>164</line><description>scala.Some.apply[Int](list.length)</description><symbolName>scala.Some.apply</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concatenate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>129</id><start>1900</start><end>1900</end><line>79</line><description>immutable.this.Map.canBuildFrom[String, Int]</description><symbolName>scala.collection.immutable.Map.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>zip</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>138</id><start>2318</start><end>2321</end><line>96</line><description>scala.collection.immutable.Nil</description><symbolName>scala.collection.immutable.Nil</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>210</id><start>3500</start><end>3500</end><line>139</line><description>immutable.this.List.canBuildFrom[Unit]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>getCompanyValue</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>219</id><start>4034</start><end>4035</end><line>156</line><description>0</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concatenate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>120</id><start>1848</start><end>1859</end><line>78</line><description>map2.toList</description><symbolName>scala.collection.TraversableOnce.toList</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>165</id><start>3121</start><end>3121</end><line>129</line><description>emp.copy$default$1</description><symbolName>com.techsophy.training.Employee.copy$default$1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>192</id><start>3615</start><end>3619</end><line>142</line><description>a._1</description><symbolName>scala.Tuple4._1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>201</id><start>3684</start><end>3695</end><line>143</line><description>a._3.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student])</description><symbolName>scala.collection.SeqLike.:+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>show</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>60</id><start>313</start><end>328</end><line>15</line><description>Exercise.this.fill(number)(f)</description><symbolName>com.techsophy.training.Exercise.fill</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>getCompanyValue</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>213</id><start>3959</start><end>3959</end><line>154</line><description>immutable.this.List.canBuildFrom[Int]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>186</id><start>3563</start><end>3563</end><line>141</line><description>immutable.this.List.canBuildFrom[com.techsophy.training.Student]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>222</id><start>4141</start><end>4154</end><line>160</line><description>new java.io.File(dir)</description><symbolName>java.io.File.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>87</id><start>868</start><end>900</end><line>46</line><description>rList = scala.Predef.intArrayOps(scala.Predef.intArrayOps(rList).tail).:+[Int](scala.Predef.intArrayOps(rList).head)((ClassTag.Int: scala.reflect.ClassTag[Int]))</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Assign</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>sum</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>96</id><start>1092</start><end>1096</end><line>57</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>168</id><start>3117</start><end>3184</end><line>129</line><description>emp.copy(x$11, x$12, x$10, x$13)</description><symbolName>com.techsophy.training.Employee.copy</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>177</id><start>3214</start><end>3279</end><line>132</line><description>{
  &lt;artifact&gt; val x$14: com.techsophy.training.Salary = Salary.apply(salary1, emp.salary.hra, emp.salary.ta);
  &lt;artifact&gt; val x$15: Int = emp.copy$default$1;
  &lt;artifact&gt; val x$16: String = emp.copy$default$2;
  &lt;artifact&gt; val x$17: Int = emp.copy$default$4;
  emp.copy(x$15, x$16, x$14, x$17)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>150</id><start>2956</start><end>2957</end><line>122</line><description>1</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeKeys</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>132</id><start>2128</start><end>2138</end><line>87</line><description>rMap.-(key)</description><symbolName>scala.collection.MapLike.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>159</id><start>3035</start><end>3078</end><line>126</line><description>emp.salary.basic.+(0.1.*(emp.salary.basic))</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>merge</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>141</id><start>2629</start><end>2661</end><line>108</line><description>scala.StringContext.apply(&quot;x = &quot;, &quot; ,&quot;, &quot; and y=&quot;, &quot; ,  &quot;, &quot;&quot;).s(x, xs1, y, ys1)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>dedupe</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>105</id><start>1468</start><end>1490</end><line>70</line><description>element.==(result.head)</description><symbolName>scala.Int.==</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeOdd</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>114</id><start>1689</start><end>1708</end><line>74</line><description>scala.Predef.any2stringadd[scala.collection.immutable.Map[String,Int]](result).+(element._1)</description><symbolName>scala.Predef.any2stringadd.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concatenate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>123</id><start>1890</start><end>1894</end><line>79</line><description>x$5._1</description><symbolName>scala.Tuple2._1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>195</id><start>3634</start><end>3638</end><line>142</line><description>a._3</description><symbolName>scala.Tuple4._3</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>204</id><start>3729</start><end>3733</end><line>144</line><description>a._1</description><symbolName>scala.Tuple4._1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>78</id><start>776</start><end>777</end><line>41</line><description>1</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>reverse</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>69</id><start>586</start><end>598</end><line>31</line><description>list.isEmpty</description><symbolName>scala.collection.SeqLike.isEmpty</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>231</id><start>4183</start><end>4326</end><line>161</line><description>{
  val list: Array[java.io.File] = directory.listFiles();
  if (list.length.&gt;(0))
    scala.Some.apply[Int](list.length)
  else
    scala.None
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>sum</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>90</id><start>1003</start><end>1033</end><line>53</line><description>opt1.nonEmpty.&amp;&amp;(opt2.nonEmpty)</description><symbolName>scala.Boolean.&amp;&amp;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>show</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>63</id><start>339</start><end>356</end><line>17</line><description>returnList.toList</description><symbolName>scala.collection.TraversableOnce.toList</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>wordCount</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>99</id><start>1296</start><end>1313</end><line>66</line><description>str.split(&quot;\\s+&quot;)</description><symbolName>java.lang.String.split</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>45</id><start>733</start><end>738</end><line>19</line><description>SimpleProducer.this.props</description><symbolName>com.skafka.example.SimpleProducer.props</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>send</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>54</id><start>1138</start><end>1142</end><line>33</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>171</id><start>3264</start><end>3277</end><line>132</line><description>emp.salary.ta</description><symbolName>com.techsophy.training.Salary.ta</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>reverse</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>72</id><start>646</start><end>655</end><line>35</line><description>list.tail</description><symbolName>scala.collection.TraversableLike.tail</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>81</id><start>832</start><end>838</end><line>43</line><description>scala.Predef.intArrayOps(a).head</description><symbolName>scala.collection.IndexedSeqOptimized.head</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>merge</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>144</id><start>2696</start><end>2716</end><line>110</line><description>Exercise.this.merge(xs1, list2).::[Int](x$8)</description><symbolName>scala.collection.immutable.List.::</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>concatenate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>126</id><start>1934</start><end>1934</end><line>79</line><description>math.this.Numeric.IntIsIntegral</description><symbolName>scala.math.Numeric.IntIsIntegral</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>153</id><start>2984</start><end>3004</end><line>123</line><description>0.2.*(emp.salary.hra)</description><symbolName>scala.Double.*</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>162</id><start>3142</start><end>3158</end><line>129</line><description>emp.salary.basic</description><symbolName>com.techsophy.training.Salary.basic</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>27</id><start>1046</start><end>1108</end><line>28</line><description>scala.collection.JavaConversions.deprecated iterableAsScalaIterable[org.apache.kafka.clients.consumer.ConsumerRecord[String,String]](records).map[(String, String), Iterable[(String, String)]](((record: org.apache.kafka.clients.consumer.ConsumerRecord[String,String]) =&gt; scala.Tuple2.apply[String, String](record.topic(), record.value())))(collection.this.Iterable.canBuildFrom[(String, String)]).headOption</description><symbolName>scala.collection.TraversableLike.headOption</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>36</id><start>403</start><end>451</end><line>13</line><description>SimpleProducer.this.props.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;)</description><symbolName>java.util.Hashtable.put</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>dedupe</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>108</id><start>1504</start><end>1521</end><line>70</line><description>{
  &lt;synthetic&gt; &lt;artifact&gt; val x$4: Int = element;
  result.::[Int](x$4)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeKeys</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>135</id><start>2087</start><end>2087</end><line>86</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeOdd</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>117</id><start>1685</start><end>1723</end><line>74</line><description>scala.Predef.Map.apply[String, Int](scala.Predef.ArrowAssoc[String](scala.Predef.any2stringadd[scala.collection.immutable.Map[String,Int]](result).+(element._1)).-&gt;[Int](element._2))</description><symbolName>scala.collection.generic.GenMapFactory.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>18</id><start>904</start><end>909</end><line>24</line><description>SimpleConsumer.this.topic</description><symbolName>com.skafka.example.SimpleConsumer.topic</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>9</id><start>616</start><end>634</end><line>19</line><description>&quot;key.deserializer&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>send</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>48</id><start>885</start><end>906</end><line>24</line><description>SimpleProducer.this.producer.send(record)</description><symbolName>org.apache.kafka.clients.producer.KafkaProducer.send</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>show</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>57</id><start>233</start><end>234</end><line>13</line><description>1</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>21</id><start>1031</start><end>1038</end><line>27</line><description>SimpleConsumer.this.timeout</description><symbolName>com.skafka.example.SimpleConsumer.timeout</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>3</id><start>472</start><end>478</end><line>14</line><description>10000L</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>rotate</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>84</id><start>876</start><end>886</end><line>46</line><description>scala.Predef.intArrayOps(rList).tail</description><symbolName>scala.collection.IndexedSeqOptimized.tail</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>12</id><start>685</start><end>705</end><line>20</line><description>&quot;value.deserializer&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>sum</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>93</id><start>1043</start><end>1068</end><line>54</line><description>scala.Some.apply[Int](opt1.get.+(opt2.get))</description><symbolName>scala.Some.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>dedupe</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>102</id><start>1431</start><end>1440</end><line>70</line><description>list.last</description><symbolName>scala.collection.LinearSeqOptimized.last</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>reverse</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>75</id><start>638</start><end>669</end><line>35</line><description>Exercise.this.reverse(list.tail).:+[Int, List[Int]](list.head)(immutable.this.List.canBuildFrom[Int])</description><symbolName>scala.collection.SeqLike.:+</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>30</id><start>1227</start><end>1231</end><line>33</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>39</id><start>519</start><end>535</end><line>16</line><description>&quot;key.serializer&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>removeOdd</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>111</id><start>1652</start><end>1671</end><line>74</line><description>element._2.%(2).!=(0)</description><symbolName>scala.Int.!=</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>fill</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>66</id><start>451</start><end>457</end><line>23</line><description>scala.collection.immutable.Nil</description><symbolName>scala.collection.immutable.Nil</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>15</id><start>746</start><end>780</end><line>21</line><description>SimpleConsumer.this.props.put(&quot;max.poll.records&quot;, &quot;1&quot;)</description><symbolName>java.util.Hashtable.put</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>230</id><start>4308</start><end>4312</end><line>167</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>42</id><start>584</start><end>602</end><line>17</line><description>&quot;value.serializer&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>send</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>51</id><start>982</start><end>1031</end><line>29</line><description>SimpleProducer.this.logger.debug(&quot;Error in reading from kafka &quot;, wue)</description><symbolName>org.slf4j.Logger.debug</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>read</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>24</id><start>1083</start><end>1095</end><line>28</line><description>record.value()</description><symbolName>org.apache.kafka.clients.consumer.ConsumerRecord.value</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</source><package>com.skafka.example</package><class>SimpleProducer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleProducer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleProducer.scala</path><id>33</id><start>346</start><end>359</end><line>10</line><description>this.getClass()</description><symbolName>java.lang.Object.getClass</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</source><package>com.skafka.example</package><class>SimpleConsumer</class><classType>Class</classType><fullClassName>com.skafka.example.SimpleConsumer</fullClassName><method>&lt;none&gt;</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/skafka/example/SimpleConsumer.scala</path><id>6</id><start>583</start><end>593</end><line>18</line><description>&quot;group.id&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>getCompanyValue</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>221</id><start>4014</start><end>4068</end><line>156</line><description>valuesList.foldLeft[Int](0)(((acc: Int, elem: Int) =&gt; acc.+(elem)))</description><symbolName>scala.collection.LinearSeqOptimized.foldLeft</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>203</id><start>3671</start><end>3702</end><line>143</line><description>scala.Tuple4.apply[List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student]](a._1, a._2, a._3.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student]), a._4)</description><symbolName>scala.Tuple4.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>getCompanyValue</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>212</id><start>3995</start><end>4009</end><line>155</line><description>customer.value</description><symbolName>com.techsophy.training.Customer.value</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>152</id><start>2990</start><end>3004</end><line>123</line><description>emp.salary.hra</description><symbolName>com.techsophy.training.Salary.hra</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>179</id><start>2879</start><end>3293</end><line>120</line><description>employees.map[com.techsophy.training.Employee, List[com.techsophy.training.Employee]](((emp: com.techsophy.training.Employee) =&gt; {
  val salary1: Double = if (emp.age.&gt;(50))
    {
      hra = 1;
      emp.salary.hra.+(0.2.*(emp.salary.hra))
    }
  else
    emp.salary.basic.+(0.1.*(emp.salary.basic));
  if (hra.==(1))
    {
      &lt;artifact&gt; val x$10: com.techsophy.training.Salary = Salary.apply(emp.salary.basic, salary1, emp.salary.ta);
      &lt;artifact&gt; val x$11: Int = emp.copy$default$1;
      &lt;artifact&gt; val x$12: String = emp.copy$default$2;
      &lt;artifact&gt; val x$13: Int = emp.copy$default$4;
      emp.copy(x$11, x$12, x$10, x$13)
    }
  else
    {
      &lt;artifact&gt; val x$14: com.techsophy.training.Salary = Salary.apply(salary1, emp.salary.hra, emp.salary.ta);
      &lt;artifact&gt; val x$15: Int = emp.copy$default$1;
      &lt;artifact&gt; val x$16: String = emp.copy$default$2;
      &lt;artifact&gt; val x$17: Int = emp.copy$default$4;
      emp.copy(x$15, x$16, x$14, x$17)
    }
}))(immutable.this.List.canBuildFrom[com.techsophy.training.Employee])</description><symbolName>scala.collection.immutable.List.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>188</id><start>3571</start><end>3575</end><line>141</line><description>a._2</description><symbolName>scala.Tuple4._2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>merge</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>143</id><start>2675</start><end>2680</end><line>109</line><description>x.&lt;(y)</description><symbolName>scala.Int.&lt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>170</id><start>3248</start><end>3262</end><line>132</line><description>emp.salary.hra</description><symbolName>com.techsophy.training.Salary.hra</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>getCompanyValue</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>215</id><start>3922</start><end>3922</end><line>153</line><description>immutable.this.List.canBuildFrom[Int]</description><symbolName>scala.collection.immutable.List.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>appraisal</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>161</id><start>3097</start><end>3105</end><line>128</line><description>hra.==(1)</description><symbolName>scala.Int.==</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>224</id><start>4202</start><end>4223</end><line>162</line><description>directory.listFiles()</description><symbolName>java.io.File.listFiles</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>197</id><start>3614</start><end>3645</end><line>142</line><description>scala.Tuple4.apply[List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student], List[com.techsophy.training.Student]](a._1, a._2.:+[com.techsophy.training.Student, List[com.techsophy.training.Student]](s)(immutable.this.List.canBuildFrom[com.techsophy.training.Student]), a._3, a._4)</description><symbolName>scala.Tuple4.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>countFiles</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>233</id><start>4344</start><end>4348</end><line>171</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</source><package>com.techsophy.training</package><class>Exercise</class><classType>Class</classType><fullClassName>com.techsophy.training.Exercise</fullClassName><method>spiltByBranch</method><path>/home/sudha/IdeaProjects/Project2/src/main/scala/com/techsophy/training/Exercise.scala</path><id>206</id><start>3741</start><end>3745</end><line>144</line><description>a._3</description><symbolName>scala.Tuple4._3</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
</statements>